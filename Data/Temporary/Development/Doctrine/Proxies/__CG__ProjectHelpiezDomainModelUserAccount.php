<?php

namespace TYPO3\Flow\Persistence\Doctrine\Proxies\__CG__\Project\Helpiez\Domain\Model;

/**
 * THIS CLASS WAS GENERATED BY THE DOCTRINE ORM. DO NOT EDIT THIS FILE.
 */
class UserAccount extends \Project\Helpiez\Domain\Model\UserAccount implements \Doctrine\ORM\Proxy\Proxy
{
    private $_entityPersister;
    private $_identifier;
    public $__isInitialized__ = false;
    public function __construct($entityPersister, $identifier)
    {
        $this->_entityPersister = $entityPersister;
        $this->_identifier = $identifier;
    }
    /** @private */
    public function __load()
    {
        if (!$this->__isInitialized__ && $this->_entityPersister) {
            $this->__isInitialized__ = true;

            if (method_exists($this, "__wakeup")) {
                // call this after __isInitialized__to avoid infinite recursion
                // but before loading to emulate what ClassMetadata::newInstance()
                // provides.
                $this->__wakeup();
            }

            if ($this->_entityPersister->load($this->_identifier, $this) === null) {
                throw new \Doctrine\ORM\EntityNotFoundException();
            }
            unset($this->_entityPersister, $this->_identifier);
        }
    }

    /** @private */
    public function __isInitialized()
    {
        return $this->__isInitialized__;
    }

    
    public function __wakeup()
    {
        $this->__load();
        return parent::__wakeup();
    }

    public function Flow_Aop_Proxy_fixMethodsAndAdvicesArrayForDoctrineProxies()
    {
        $this->__load();
        return parent::Flow_Aop_Proxy_fixMethodsAndAdvicesArrayForDoctrineProxies();
    }

    public function Flow_Aop_Proxy_fixInjectedPropertiesForDoctrineProxies()
    {
        $this->__load();
        return parent::Flow_Aop_Proxy_fixInjectedPropertiesForDoctrineProxies();
    }

    public function Flow_Aop_Proxy_invokeJoinPoint(\TYPO3\Flow\Aop\JoinPointInterface $joinPoint)
    {
        $this->__load();
        return parent::Flow_Aop_Proxy_invokeJoinPoint($joinPoint);
    }

    public function getTimestamp()
    {
        $this->__load();
        return parent::getTimestamp();
    }

    public function setTimestamp($timestamp = NULL)
    {
        $this->__load();
        return parent::setTimestamp($timestamp);
    }

    public function updatedTimestamps()
    {
        $this->__load();
        return parent::updatedTimestamps();
    }

    public function getName()
    {
        $this->__load();
        return parent::getName();
    }

    public function setName($name)
    {
        $this->__load();
        return parent::setName($name);
    }

    public function getStatus()
    {
        $this->__load();
        return parent::getStatus();
    }

    public function setStatus($status)
    {
        $this->__load();
        return parent::setStatus($status);
    }

    public function getNumber()
    {
        $this->__load();
        return parent::getNumber();
    }

    public function setNumber($number)
    {
        $this->__load();
        return parent::setNumber($number);
    }

    public function getgender()
    {
        $this->__load();
        return parent::getgender();
    }

    public function setgender($gender = NULL)
    {
        $this->__load();
        return parent::setgender($gender);
    }

    public function getUsername()
    {
        $this->__load();
        return parent::getUsername();
    }

    public function setUsername($username)
    {
        $this->__load();
        return parent::setUsername($username);
    }

    public function getPassword()
    {
        $this->__load();
        return parent::getPassword();
    }

    public function setPassword($password)
    {
        $this->__load();
        return parent::setPassword($password);
    }

    public function getEmail()
    {
        $this->__load();
        return parent::getEmail();
    }

    public function setEmail($email)
    {
        $this->__load();
        return parent::setEmail($email);
    }

    public function getProfilePic()
    {
        $this->__load();
        return parent::getProfilePic();
    }

    public function setProfilePic($profilePic = NULL)
    {
        $this->__load();
        return parent::setProfilePic($profilePic);
    }

    public function getAddress()
    {
        $this->__load();
        return parent::getAddress();
    }

    public function setAddress($address)
    {
        $this->__load();
        return parent::setAddress($address);
    }

    public function getFacebook()
    {
        $this->__load();
        return parent::getFacebook();
    }

    public function setFacebook($facebook)
    {
        $this->__load();
        return parent::setFacebook($facebook);
    }

    public function getGooglePlus()
    {
        $this->__load();
        return parent::getGooglePlus();
    }

    public function setGooglePlus($googlePlus)
    {
        $this->__load();
        return parent::setGooglePlus($googlePlus);
    }

    public function getBlog()
    {
        $this->__load();
        return parent::getBlog();
    }

    public function setBlog($blog)
    {
        $this->__load();
        return parent::setBlog($blog);
    }

    public function getRewards()
    {
        $this->__load();
        return parent::getRewards();
    }

    public function setRewards($rewards)
    {
        $this->__load();
        return parent::setRewards($rewards);
    }

    public function getInterest()
    {
        $this->__load();
        return parent::getInterest();
    }

    public function setInterest($interest)
    {
        $this->__load();
        return parent::setInterest($interest);
    }

    public function Validate($userAccountRepository, $controller)
    {
        $this->__load();
        return parent::Validate($userAccountRepository, $controller);
    }


    public function __sleep()
    {
        return array_merge(array('__isInitialized__'), parent::__sleep());
    }

    public function __clone()
    {
        if (!$this->__isInitialized__ && $this->_entityPersister) {
            $this->__isInitialized__ = true;
            $class = $this->_entityPersister->getClassMetadata();
            $original = $this->_entityPersister->load($this->_identifier);
            if ($original === null) {
                throw new \Doctrine\ORM\EntityNotFoundException();
            }
            foreach ($class->reflFields as $field => $reflProperty) {
                $reflProperty->setValue($this, $reflProperty->getValue($original));
            }
            unset($this->_entityPersister, $this->_identifier);
        }
        parent::__clone();
    }
}